//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `smart_devices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Home.Heating;

public class InformationAboutChangingTemperature implements java.lang.Cloneable,
                                                            java.io.Serializable
{
    public Date start;

    public Date end;

    public int value;

    public InformationAboutChangingTemperature()
    {
        this.start = new Date();
        this.end = new Date();
    }

    public InformationAboutChangingTemperature(Date start, Date end, int value)
    {
        this.start = start;
        this.end = end;
        this.value = value;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        InformationAboutChangingTemperature r = null;
        if(rhs instanceof InformationAboutChangingTemperature)
        {
            r = (InformationAboutChangingTemperature)rhs;
        }

        if(r != null)
        {
            if(this.start != r.start)
            {
                if(this.start == null || r.start == null || !this.start.equals(r.start))
                {
                    return false;
                }
            }
            if(this.end != r.end)
            {
                if(this.end == null || r.end == null || !this.end.equals(r.end))
                {
                    return false;
                }
            }
            if(this.value != r.value)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Home::Heating::InformationAboutChangingTemperature");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, start);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, end);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, value);
        return h_;
    }

    public InformationAboutChangingTemperature clone()
    {
        InformationAboutChangingTemperature c = null;
        try
        {
            c = (InformationAboutChangingTemperature)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Date.ice_write(ostr, this.start);
        Date.ice_write(ostr, this.end);
        ostr.writeInt(this.value);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.start = Date.ice_read(istr);
        this.end = Date.ice_read(istr);
        this.value = istr.readInt();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, InformationAboutChangingTemperature v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public InformationAboutChangingTemperature ice_read(com.zeroc.Ice.InputStream istr)
    {
        InformationAboutChangingTemperature v = new InformationAboutChangingTemperature();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<InformationAboutChangingTemperature> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, InformationAboutChangingTemperature v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(44);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<InformationAboutChangingTemperature> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(InformationAboutChangingTemperature.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final InformationAboutChangingTemperature _nullMarshalValue = new InformationAboutChangingTemperature();

    /** @hidden */
    public static final long serialVersionUID = 3748275827217431697L;
}
